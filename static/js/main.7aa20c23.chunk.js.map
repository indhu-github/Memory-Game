{"version":3,"sources":["components/Card.js","App.js","index.js"],"names":["Card","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","matched","resetTurn","setTimeout","prevTurns","Object","values","every","window","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAEe,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAK1D,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBACEF,UAAU,OACVC,IAAI,iBACJC,IAAI,YACJC,QAZY,YACjBJ,GAAYF,EAAaD,WCA9B,IAAMQ,EAAa,CACjB,CAAEH,IAAK,kBACP,CAAEA,IAAK,0BACP,CAAEA,IAAK,yBACP,CAAEA,IAAK,mBACP,CAAEA,IAAK,mBACP,CAAEA,IAAK,wBA2FMI,MAxFf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOP,EAAP,KAAiBgB,EAAjB,KAGMC,EAAe,WACnB,IAAMC,EAAgB,UAAIb,EAAeA,GACtCc,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAACzB,GAAD,mBAAC,eAAeA,GAAhB,IAAsB0B,GAAIH,KAAKC,cAEtCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAGLb,EAAe,SAACD,GACpBe,EAAYG,EAAalB,GAAQgB,EAAahB,IAIhD2B,qBAAU,WACJZ,GAAaE,IACfE,GAAY,GACRJ,EAAUV,MAAQY,EAAUZ,KAC9BO,GAAS,SAACgB,GACR,OAAOA,EAAUH,KAAI,SAACzB,GACpB,OAAIA,EAAKK,MAAQU,EAAUV,IAClB,2BAAKL,GAAZ,IAAkB6B,SAAS,IAEpB7B,QAIb8B,KAEAC,YAAW,kBAAMD,MAAa,QAGjC,CAACf,EAAWE,IAGf,IAAMa,EAAY,WAChBd,EAAa,MACbE,EAAa,MACbJ,GAAS,SAACkB,GAAD,OAAeA,EAAY,KACpCb,GAAY,IAmBd,OAfAQ,qBAAU,WACRP,MACC,IAGHO,qBAAU,WAENd,EAAQ,GACRoB,OAAOC,OAAOvB,GAAOwB,OAAM,SAACnC,GAAD,OAA2B,IAAjBA,EAAK6B,aAE1CO,OAAOC,MAAP,yBAA+BxB,EAA/B,WACAO,OAED,CAACT,EAAOE,IAGT,sBAAKT,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASa,EAAjB,sBACA,qBAAKhB,UAAU,YAAf,SACGO,EAAMc,KAAI,SAACzB,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASe,GAAaf,IAASiB,GAAajB,EAAK6B,QAC1D1B,SAAUA,GAJLH,EAAK0B,SAQhB,uCAAUb,SC3FhByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7aa20c23.chunk.js","sourcesContent":["import \"./Card.css\";\r\n\r\nexport default function Card({ card, handleChoice, flipped, disabled }) {\r\n  const handleClick = () => {\r\n    !disabled && handleChoice(card);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className={flipped ? \"flipped\" : \"\"}>\r\n        <img className=\"front\" src={card.src} alt=\"front card\" />\r\n        <img\r\n          className=\"back\"\r\n          src=\"/img/cover.jpg\"\r\n          alt=\"back card\"\r\n          onClick={handleClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/Card\";\n\nconst cardImages = [\n  { src: \"/img/apple.jpg\" },\n  { src: \"/img/custard-apple.jpg\" },\n  { src: \"/img/dragon-fruit.jpg\" },\n  { src: \"/img/grapes.jpg\" },\n  { src: \"/img/papaya.jpg\" },\n  { src: \"/img/watermelon.jpg\" },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  //shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  //compare two selected cards and set the matched flag for two cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 800);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  //reset choices and increment turns\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  //start a new game automatically\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  //shows the game over message\n  useEffect(() => {\n    if (\n      turns > 0 &&\n      Object.values(cards).every((card) => card.matched === true)\n    ) {\n      window.alert(`Game over with ${turns} turns`);\n      shuffleCards();\n    }\n  }, [cards, turns]);\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns:{turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}